#!/usr/bin/env node

const { createProgram } = require('../lib/program')
const { info } = require('ara-console')
const afs = require('../')

const {
	promptCostConfirmation,
	promptForPassword,
	onfatal
} = require('../lib/util')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: afs commit: [-h] [--help] [options]
`
})

const { argv } = program
  .command('$0 <did>', "Push local staged AFS changes to the Ethereum blockchain and DCDN", (program) => {
    program
      .positional('did', {
        type: 'string',
        describe: "An AFS ARA decentralized identity (did) URI"
      })
      .option('price', {
        alias: 'P',
        type: 'number',
        describe: "Price (in ARA) to set the cost of the AFS"
      })
      .option('force', {
        alias: 'f',
        type: 'boolean',
        describe: 'Force commit operation',
      })
  }, oncommit)

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

async function oncommit(argv) {
  console.log('ONCOMMIT')
	const { did, price, secret, network, keyring } = argv
  if (!did) { onfatal(new Error("Missing AFS DID. See 'afs remove --help'.")) }

  const { password } = await promptForPassword()

  const keyringOpts = { secret, network, keyring }

  let result = argv.force
  if (!result) {
    try {
      const cost = await afs.estimateCommitGasCost({ did, password, price, keyringOpts })
      const { answer } = await promptCostConfirmation(cost)
      result = answer
    } catch (err) {
      onfatal(err)
    }
  }

  if (result) {
    info("committing with identity: %s", did)
    const result = await afs.commit({ did, password, price, keyringOpts })
    if (result instanceof Error) {
      onfatal(result)
    } else {
      info(`file(s) successfully committed using ${result.gasUsed} gas`)
    }
  } else {
    onfatal() // exit
  }
}
