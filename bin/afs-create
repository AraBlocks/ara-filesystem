#!/usr/bin/env node

/* eslint no-shadow: [ "error", { "allow": ["_", "program", "argv"] }] */

const { promptForPassword, onfatal } = require('../lib/util')
const { createProgram } = require('../lib/program')
const { AID_PREFIX } = require('../constants')
const { info } = require('ara-console')
const { create } = require('../create')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: afs create: [-h] [--help] [options] [--] <owner>
`
})

// Parse program arguments based on yargs spec
const { argv } = program
  .command('$0 <owner>', 'Create AFS with given identity', (_) => {
    _
      .positional('owner', {
        type: 'string',
        describe: "This AFS owner's ARA decentralized identity (did) URI"
      })
      .option('archiver', {
        type: 'string',
        alias: 'an',
        describe: 'Network name of the key for the DID archiver in the keyring',
      })
      .option('resolver', {
        type: 'string',
        alias: 'rn',
        describe: 'Network name of the key for the DID resolver in the keyring',
      })
      .option('quiet', {
        alias: 'q',
        default: false,
        describe: 'Only output errors and results'
      })
  }, oncreate)
  .help('h')
  .recommendCommands()
  .strict()

async function oncreate(argv) {
  let { owner } = argv

  if (0 != owner.indexOf(AID_PREFIX)) {
    owner = `${AID_PREFIX}${owner}`
  }

  const {
    secret, resolver, archiver, keyring
  } = argv
  const keyringOpts = {
    archiver: {
      secret,
      network: archiver,
      keyring
    },
    resolver: {
      secret,
      network: resolver,
      keyring
    }
  }

  const { password } = await promptForPassword()
  if (!argv.quiet) { process.stdout.write('\n') }

  let arafs
  try {
    arafs = await create({ owner, password, keyringOpts })
  } catch (err) {
    onfatal(err)
  }

  if (!argv.quiet) {
    info('New AFS created with DID: \n\n\t\t\t< %s >\n', arafs.afs.did)
    info('Please safely store the following 12 word mnemonic phrase for this AFS.' +
      ' This phrase will be required to restore and delete this AFS.' +
      ' It will never be shown again: \n\n\t\t\t< %s >\n', arafs.mnemonic)
  } else {
    process.stdout.write(`${arafs.afs.did};;${arafs.mnemonic}`)
    process.stdout.write('\n')
  }
  arafs.afs.close()
}
