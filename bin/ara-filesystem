#!/usr/bin/env node

const debug = require('debug')('ara-filesystem')
const { info, warn, error, log } = require('ara-console')
const { basename, resolve } = require('path')
const { stat, access } = require('fs')
const cliWidth = require('cli-width')
const differ = require('ansi-diff-stream')
const pify = require('pify')
const program = require('yargs')
const afs = require('../')
const fs = require('fs')
const ProgressStream = require('progress-stream')
const ProgressBar = require('progress')
const bytes = require('pretty-bytes')
const table = require('table')

const isDirectory = require('is-directory')
const isFile = require('is-file')
const isSymlink = require('is-symlink')

const ignored = require('../lib/ignore')

const toLower = (x) => String(x).toLowerCase()
const $0 = basename(process.argv[1] || package.name)

process.on('unhandledRejection', onfatal)
process.on('uncaughtExeption', onfatal)

const { argv } = program
  .usage("usage: $0 [-hDV] [options] <command> [options]")
  .option('debug', {
    type: 'boolean',
    alias: 'D',
    describe: "Enable debug output"
  })
  .option('help', {
    alias: 'h',
    describe: "Show this help message"
  })
  .option('version', {
    alias: 'V',
    describe: "Show program version"
  })
  .command('create <owner>', "Create AFS with given identity", (program) => {
    program
      .positional('owner', {
        type: 'string',
        describe: "This AFS owner's ARA decentralized identity (did) URI"
      })
  }, oncreate)
  .command('add <did> <pathspec...>', "Add files or directories to an AFS", (program) => {
    program
      .positional('pathspec', {
        type: 'string',
        describe: "The file(s) you wish to add to AFS"
      })
      .positional('did', {
        type: 'string',
        describe: "An AFS ARA decentralized identity (did) URI"
      })
  }, onadd)
  .command('remove <did> <pathspec...>', "Remove files or directories from an AFS", (program) => {
    program
      .positional('pathspec', {
        type: 'string',
        describe: "The file(s) you wish to add to AFS"
      })
      .positional('did', {
        type: 'string',
        describe: "An AFS ARA decentralized identity (did) URI"
      })
  }, onremove)
  .command('history <did>', "Retrieve the revision history of this AFS", (program) => {
    program
      .positional('did', {
        type: 'string',
        describe: "An AFS ARA decentralized identity (did) URI"
      })
  }, onhistory)

async function oncreate(argv) {
  let owner = argv.owner
  if (null == owner) {
    onfatal(new Error("Missing AFS owner DID. See 'afs create --help'."))
  }

  if (0 == owner.indexOf('did:') && 0 != owner.indexOf('did:ara:')) {
    onfatal(new Error("Expecting a DID URI with an 'ara' method."))
  }

  if (0 != owner.indexOf('did:ara:')) {
    owner = 'did:ara:' + owner
  }

  let arafs
  try {
    arafs = await afs.create( { owner } )
  } catch (err) { onfatal(err) }

  info('AFS created with did', arafs.did)
}

async function onhistory(argv) {
  let did = argv.did
  if (null == did) {
    onfatal(new Error("Missing AFS DID. See 'afs add --help'."))
  }

  if (0 == did.indexOf('did:') && 0 != did.indexOf('did:ara:')) {
    onfatal(new Error("Expecting a DID URI with an 'ara' method."))
  }

  if (0 != did.indexOf('did:ara:')) {
    did = 'did:ara:' + did
  }

  const tableOpts = {
    columnCount: 3,
    border: table.getBorderCharacters('ramac'),
    columnDefault: {
      paddingLeft: 1,
      paddingRight: 1,
      width: parseInt(((cliWidth() || 30) - 10)/3),
    },
    columns: [
      { width: 4 },
      { width: 4 },
      { width: 30 },
    ]
  }

  const arafs = await afs.create( { did } )
  const stream = table.createStream(tableOpts)

  arafs.history(argv.partition || arafs.HOME)
    .on('error', onfatal)
    .on('end', () => process.exit(0))
    .on('data', (log) => {
      if (true != argv['border']) {
        console.log('%s\t%s\t%s',
          log.version,
          log.type.toUpperCase(),
          log.name
        )
      } else {
        stream.write([
          log.version,
          log.type.toUpperCase(),
          log.name,
        ])
      }
    })
}

async function onadd(argv) {
  let [ ...paths ] = argv.pathspec
  let did = argv.did

  if (!did) { onfatal(new Error("Missing AFS DID. See 'afs add --help'.")) }
  if (!paths || !paths.length) {
    onfatal(new Error("Missing local file paths. See 'afs add --help'."))
  }

  info("id: %s", did)
  info("paths: ", paths)

  await afs.add({ did, paths })
}

async function onremove(argv) {
  let [ ...paths ] = argv.pathspec
  let did = argv.did

  if (!did) { onfatal(new Error("Missing AFS DID. See 'afs remove --help'.")) }
  if (!paths || !paths.length) {
    onfatal(new Error("Missing local file paths. See 'afs remove --help'."))
  }

  info("id: %s", did)
  info("paths: ", paths)

  await afs.remove({ did, paths })
}

function onfatal(err) {
  debug(err)
  error("fatal:", err.message)
  process.exit(1)
}
