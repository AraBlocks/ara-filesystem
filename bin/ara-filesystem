#!/usr/bin/env node

const debug = require('debug')('ara-filesystem')
const { info, warn, error } = require('ara-console')
const { basename } = require('path')
const program = require('yargs')
const afs = require('../')

const $0 = basename(process.argv[1] || package.name)

process.on('unhandledRejection', onfatal)
process.on('uncaughtExeption', onfatal)

const { argv } = program
  .usage("usage: $0 [-hDV] [options] <command> [options]")
  .option('debug', {
    type: 'boolean',
    alias: 'D',
    describe: "Enable debug output"
  })
  .option('help', {
    alias: 'h',
    describe: "Show this help message"
  })
  .option('version', {
    alias: 'V',
    describe: "Show program version"
  })
  .command('create [did]', "Create AFS with given identity", (program) => {
    program
      .positional('did', {
        type: 'string',
        describe: "An ARA decentralized identity (did) URI"
      })
  }, oncreate)
  .command('publish [did]', "Publishes AFS with given DID to the Ethereum network", (program) => {
    program
      .positional('did', {
        type: 'string',
        describe: "DID of the AFS to publish"
      })
  }, onpublish)
  .command('resolve [did]', "Queries current tree data from Ethereum blockchain", (program) => {
    program
      .positional('did', {
        type: 'string',
        describe: "DID to resolve"
      })
  }, onresolve)

async function oncreate({did}) {
  did = validate(did)  
  try {
    await afs.create(did)
  } catch (err) { onfatal(err) }

  info('AFS for', did, 'created')
}

async function onpublish({did}) {
  did = validate(did)
  try {
    const opts = {
      identity: did,
      root: 'root', // TODO(cckelly): pass in actual values
      signature: 'signature' // TODO(cckelly): pass in actual values
    }
    await afs.publish(opts, () => info("AFS with AID", did, "published to the network."))
  } catch (err) { onfatal(err) }
}

async function onresolve({did}) {
  did = validate(did)
  try {
    const result = await afs.resolve(did)
    info("Resolved with tree root:", result.root)
    info("Resolved with tree signature:", result.signature)
  } catch (err) { onfatal(err) }
}

function validate(did) {
  if (null == did) {
    onfatal(new Error("Expecting DID URI."))
  }

  if (0 == did.indexOf('did:') && 0 != did.indexOf('did:ara:')) {
    onfatal(new Error("Expecting a did URI with an 'ara' method."))
  }

  if (0 != did.indexOf('did:ara:')) {
    did = 'did:ara:' + did
  }
  return did
}

function onfatal(err) {
  debug(err)
  error("fatal:", err.message)
  process.exit(1)
}
